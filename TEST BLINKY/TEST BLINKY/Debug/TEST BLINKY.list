
TEST BLINKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080023fc  080023fc  000033fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002428  08002428  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002428  08002428  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002428  08002428  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800242c  0800242c  0000342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002430  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  0800243c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  0800243c  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a68  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001210  00000000  00000000  00009a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000518  00000000  00000000  0000b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e0c  00000000  00000000  0000b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008704  00000000  00000000  0002167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e62e  00000000  00000000  00029d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a83ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a7c  00000000  00000000  000a83f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000a9e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023e4 	.word	0x080023e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080023e4 	.word	0x080023e4

0800014c <main>:
void ADXL343_Init(void);
uint8_t ADXL343_ReadRegister(uint8_t reg);
void ADXL343_WriteRegister(uint8_t reg, uint8_t value);
void Error_Handler(void);

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    // Initialize HAL library
    HAL_Init();
 8000152:	f000 f9e5 	bl	8000520 <HAL_Init>
    // Configure system clock
    SystemClock_Config();
 8000156:	f000 f8d5 	bl	8000304 <SystemClock_Config>
    // Initialize GPIO and I2C peripherals
    MX_GPIO_Init();
 800015a:	f000 f8a5 	bl	80002a8 <MX_GPIO_Init>
    MX_I2C1_Init();
 800015e:	f000 f879 	bl	8000254 <MX_I2C1_Init>
    // Initialize ADXL343 accelerometer

    HAL_Delay(100);  // Small delay for sensor startup
 8000162:	2064      	movs	r0, #100	@ 0x64
 8000164:	f000 fa3e 	bl	80005e4 <HAL_Delay>

        // Read Device ID (0x00 should return 0xE5)
        uint8_t deviceID = ADXL343_ReadRegister(0x00);
 8000168:	2000      	movs	r0, #0
 800016a:	f000 f853 	bl	8000214 <ADXL343_ReadRegister>
 800016e:	4603      	mov	r3, r0
 8000170:	71fb      	strb	r3, [r7, #7]

    if (deviceID != 0xE5) {
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	2be5      	cmp	r3, #229	@ 0xe5
 8000176:	d001      	beq.n	800017c <main+0x30>
            Error_Handler();  // If communication fails, enter error state
 8000178:	f000 f905 	bl	8000386 <Error_Handler>
        }
    ADXL343_Init();
 800017c:	f000 f81e 	bl	80001bc <ADXL343_Init>

    while (1) {
        // Read activity status from the interrupt source register
        uint8_t int_source = ADXL343_ReadRegister(ADXL343_REG_INT_SOURCE);
 8000180:	2030      	movs	r0, #48	@ 0x30
 8000182:	f000 f847 	bl	8000214 <ADXL343_ReadRegister>
 8000186:	4603      	mov	r3, r0
 8000188:	71bb      	strb	r3, [r7, #6]

        // Check if Activity bit (D4) is set, indicating motion
        if (int_source & 0x10) {
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	f003 0310 	and.w	r3, r3, #16
 8000190:	2b00      	cmp	r3, #0
 8000192:	d006      	beq.n	80001a2 <main+0x56>
            HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET);  // Turn ON LED
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800019a:	4807      	ldr	r0, [pc, #28]	@ (80001b8 <main+0x6c>)
 800019c:	f000 fcae 	bl	8000afc <HAL_GPIO_WritePin>
 80001a0:	e005      	b.n	80001ae <main+0x62>
        } else {
            HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET); // Turn OFF LED
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a8:	4803      	ldr	r0, [pc, #12]	@ (80001b8 <main+0x6c>)
 80001aa:	f000 fca7 	bl	8000afc <HAL_GPIO_WritePin>
        }

        HAL_Delay(100); // Small delay to avoid excessive polling
 80001ae:	2064      	movs	r0, #100	@ 0x64
 80001b0:	f000 fa18 	bl	80005e4 <HAL_Delay>
    while (1) {
 80001b4:	e7e4      	b.n	8000180 <main+0x34>
 80001b6:	bf00      	nop
 80001b8:	40010800 	.word	0x40010800

080001bc <ADXL343_Init>:
    }
}

void ADXL343_Init(void) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
    // Enable measurement mode
    ADXL343_WriteRegister(ADXL343_REG_POWER_CTL, 0x08);
 80001c0:	2108      	movs	r1, #8
 80001c2:	202d      	movs	r0, #45	@ 0x2d
 80001c4:	f000 f80a 	bl	80001dc <ADXL343_WriteRegister>
    // Set activity threshold (adjust sensitivity)
    ADXL343_WriteRegister(ADXL343_REG_THRESH_ACT, 10); // 10 (~0.625g per LSB)
 80001c8:	210a      	movs	r1, #10
 80001ca:	2024      	movs	r0, #36	@ 0x24
 80001cc:	f000 f806 	bl	80001dc <ADXL343_WriteRegister>
    // Enable activity detection on all axes
    ADXL343_WriteRegister(ADXL343_REG_ACT_INACT_CTL, 0x70); // Enable activity detection on X, Y, Z
 80001d0:	2170      	movs	r1, #112	@ 0x70
 80001d2:	2027      	movs	r0, #39	@ 0x27
 80001d4:	f000 f802 	bl	80001dc <ADXL343_WriteRegister>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}

080001dc <ADXL343_WriteRegister>:

void ADXL343_WriteRegister(uint8_t reg, uint8_t value) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b086      	sub	sp, #24
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	460a      	mov	r2, r1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	4613      	mov	r3, r2
 80001ea:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {reg, value};
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	733b      	strb	r3, [r7, #12]
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, ADXL343_ADDR, data, 2, HAL_MAX_DELAY);
 80001f4:	f107 020c 	add.w	r2, r7, #12
 80001f8:	f04f 33ff 	mov.w	r3, #4294967295
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2302      	movs	r3, #2
 8000200:	21a6      	movs	r1, #166	@ 0xa6
 8000202:	4803      	ldr	r0, [pc, #12]	@ (8000210 <ADXL343_WriteRegister+0x34>)
 8000204:	f000 fdd6 	bl	8000db4 <HAL_I2C_Master_Transmit>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000028 	.word	0x20000028

08000214 <ADXL343_ReadRegister>:

uint8_t ADXL343_ReadRegister(uint8_t reg) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af02      	add	r7, sp, #8
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Master_Transmit(&hi2c1, ADXL343_ADDR, &reg, 1, HAL_MAX_DELAY);
 800021e:	1dfa      	adds	r2, r7, #7
 8000220:	f04f 33ff 	mov.w	r3, #4294967295
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2301      	movs	r3, #1
 8000228:	21a6      	movs	r1, #166	@ 0xa6
 800022a:	4809      	ldr	r0, [pc, #36]	@ (8000250 <ADXL343_ReadRegister+0x3c>)
 800022c:	f000 fdc2 	bl	8000db4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, ADXL343_ADDR, &value, 1, HAL_MAX_DELAY);
 8000230:	f107 020f 	add.w	r2, r7, #15
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2301      	movs	r3, #1
 800023c:	21a6      	movs	r1, #166	@ 0xa6
 800023e:	4804      	ldr	r0, [pc, #16]	@ (8000250 <ADXL343_ReadRegister+0x3c>)
 8000240:	f000 feb6 	bl	8000fb0 <HAL_I2C_Master_Receive>
    return value;
 8000244:	7bfb      	ldrb	r3, [r7, #15]
}
 8000246:	4618      	mov	r0, r3
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028

08000254 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
    // Configure I2C peripheral
    hi2c1.Instance = I2C1;
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <MX_I2C1_Init+0x48>)
 800025a:	4a11      	ldr	r2, [pc, #68]	@ (80002a0 <MX_I2C1_Init+0x4c>)
 800025c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_I2C1_Init+0x48>)
 8000260:	4a10      	ldr	r2, [pc, #64]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000262:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000264:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <MX_I2C1_Init+0x48>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800026a:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <MX_I2C1_Init+0x48>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <MX_I2C1_Init+0x48>)
 8000272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000276:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000278:	4b08      	ldr	r3, [pc, #32]	@ (800029c <MX_I2C1_Init+0x48>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800027e:	4b07      	ldr	r3, [pc, #28]	@ (800029c <MX_I2C1_Init+0x48>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <MX_I2C1_Init+0x48>)
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028a:	4b04      	ldr	r3, [pc, #16]	@ (800029c <MX_I2C1_Init+0x48>)
 800028c:	2200      	movs	r2, #0
 800028e:	621a      	str	r2, [r3, #32]
    HAL_I2C_Init(&hi2c1);
 8000290:	4802      	ldr	r0, [pc, #8]	@ (800029c <MX_I2C1_Init+0x48>)
 8000292:	f000 fc4b 	bl	8000b2c <HAL_I2C_Init>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028
 80002a0:	40005400 	.word	0x40005400
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	4b13      	ldr	r3, [pc, #76]	@ (80002fc <MX_GPIO_Init+0x54>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a12      	ldr	r2, [pc, #72]	@ (80002fc <MX_GPIO_Init+0x54>)
 80002b4:	f043 0304 	orr.w	r3, r3, #4
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <MX_GPIO_Init+0x54>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0304 	and.w	r3, r3, #4
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

    // Configure LED pin as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = LED_PIN;
 80002d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002d8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002da:	2301      	movs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LED_GPIO_PORT, &GPIO_InitStruct);
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	4619      	mov	r1, r3
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <MX_GPIO_Init+0x58>)
 80002ee:	f000 fa81 	bl	80007f4 <HAL_GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010800 	.word	0x40010800

08000304 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b090      	sub	sp, #64	@ 0x40
 8000308:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	2228      	movs	r2, #40	@ 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f002 f83a 	bl	800238c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

    // Configure High-Speed External (HSE) oscillator
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000338:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800033e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fc25 	bl	8001b94 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x50>
        Error_Handler();
 8000350:	f000 f819 	bl	8000386 <Error_Handler>
    }

    // Configure system clock source and dividers
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2302      	movs	r3, #2
 800035a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000364:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fe92 	bl	8002098 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x7a>
        Error_Handler();
 800037a:	f000 f804 	bl	8000386 <Error_Handler>
    }
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	@ 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <Error_Handler>:

void Error_Handler(void) {
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
    // Stay in infinite loop if an error occurs
    while (1) {
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <Error_Handler+0x4>
	...

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <HAL_MspInit+0x5c>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a14      	ldr	r2, [pc, #80]	@ (80003ec <HAL_MspInit+0x5c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <HAL_MspInit+0x5c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	@ (80003ec <HAL_MspInit+0x5c>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <HAL_MspInit+0x60>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <HAL_MspInit+0x60>)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a15      	ldr	r2, [pc, #84]	@ (8000464 <HAL_I2C_MspInit+0x70>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d123      	bne.n	800045c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000430:	2312      	movs	r3, #18
 8000432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480b      	ldr	r0, [pc, #44]	@ (800046c <HAL_I2C_MspInit+0x78>)
 8000440:	f000 f9d8 	bl	80007f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 800044a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_I2C_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40005400 	.word	0x40005400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010c00 	.word	0x40010c00

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <NMI_Handler+0x4>

08000478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <HardFault_Handler+0x4>

08000480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <MemManage_Handler+0x4>

08000488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <UsageFault_Handler+0x4>

08000498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c0:	f000 f874 	bl	80005ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d4:	f7ff fff8 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480b      	ldr	r0, [pc, #44]	@ (8000508 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004da:	490c      	ldr	r1, [pc, #48]	@ (800050c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a09      	ldr	r2, [pc, #36]	@ (8000514 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f0:	4c09      	ldr	r4, [pc, #36]	@ (8000518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fe:	f001 ff4d 	bl	800239c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff fe23 	bl	800014c <main>
  bx lr
 8000506:	4770      	bx	lr
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000510:	08002430 	.word	0x08002430
  ldr r2, =_sbss
 8000514:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000518:	20000080 	.word	0x20000080

0800051c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC1_2_IRQHandler>
	...

08000520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <HAL_Init+0x28>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <HAL_Init+0x28>)
 800052a:	f043 0310 	orr.w	r3, r3, #16
 800052e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f92b 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000536:	200f      	movs	r0, #15
 8000538:	f000 f808 	bl	800054c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800053c:	f7ff ff28 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40022000 	.word	0x40022000

0800054c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_InitTick+0x54>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_InitTick+0x58>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000562:	fbb3 f3f1 	udiv	r3, r3, r1
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f935 	bl	80007da <HAL_SYSTICK_Config>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e00e      	b.n	8000598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d80a      	bhi.n	8000596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f000 f90b 	bl	80007a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800058c:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <HAL_InitTick+0x5c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_IncTick+0x1c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <HAL_IncTick+0x20>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a03      	ldr	r2, [pc, #12]	@ (80005cc <HAL_IncTick+0x20>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000008 	.word	0x20000008
 80005cc:	2000007c 	.word	0x2000007c

080005d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b02      	ldr	r3, [pc, #8]	@ (80005e0 <HAL_GetTick+0x10>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	2000007c 	.word	0x2000007c

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff fff0 	bl	80005d0 <HAL_GetTick>
 80005f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d005      	beq.n	800060a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_Delay+0x44>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060a:	bf00      	nop
 800060c:	f7ff ffe0 	bl	80005d0 <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d8f7      	bhi.n	800060c <HAL_Delay+0x28>
  {
  }
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000008 	.word	0x20000008

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	@ (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	@ (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	@ 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	@ 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff49 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff5e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffb0 	bl	8000748 <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b08b      	sub	sp, #44	@ 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000806:	e169      	b.n	8000adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000808:	2201      	movs	r2, #1
 800080a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	4013      	ands	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8158 	bne.w	8000ad6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4a9a      	ldr	r2, [pc, #616]	@ (8000a94 <HAL_GPIO_Init+0x2a0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d05e      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000830:	4a98      	ldr	r2, [pc, #608]	@ (8000a94 <HAL_GPIO_Init+0x2a0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d875      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 8000836:	4a98      	ldr	r2, [pc, #608]	@ (8000a98 <HAL_GPIO_Init+0x2a4>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d058      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 800083c:	4a96      	ldr	r2, [pc, #600]	@ (8000a98 <HAL_GPIO_Init+0x2a4>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d86f      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 8000842:	4a96      	ldr	r2, [pc, #600]	@ (8000a9c <HAL_GPIO_Init+0x2a8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d052      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000848:	4a94      	ldr	r2, [pc, #592]	@ (8000a9c <HAL_GPIO_Init+0x2a8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d869      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 800084e:	4a94      	ldr	r2, [pc, #592]	@ (8000aa0 <HAL_GPIO_Init+0x2ac>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d04c      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000854:	4a92      	ldr	r2, [pc, #584]	@ (8000aa0 <HAL_GPIO_Init+0x2ac>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d863      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 800085a:	4a92      	ldr	r2, [pc, #584]	@ (8000aa4 <HAL_GPIO_Init+0x2b0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d046      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
 8000860:	4a90      	ldr	r2, [pc, #576]	@ (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d85d      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 8000866:	2b12      	cmp	r3, #18
 8000868:	d82a      	bhi.n	80008c0 <HAL_GPIO_Init+0xcc>
 800086a:	2b12      	cmp	r3, #18
 800086c:	d859      	bhi.n	8000922 <HAL_GPIO_Init+0x12e>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <HAL_GPIO_Init+0x80>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	080008ef 	.word	0x080008ef
 8000878:	080008c9 	.word	0x080008c9
 800087c:	080008db 	.word	0x080008db
 8000880:	0800091d 	.word	0x0800091d
 8000884:	08000923 	.word	0x08000923
 8000888:	08000923 	.word	0x08000923
 800088c:	08000923 	.word	0x08000923
 8000890:	08000923 	.word	0x08000923
 8000894:	08000923 	.word	0x08000923
 8000898:	08000923 	.word	0x08000923
 800089c:	08000923 	.word	0x08000923
 80008a0:	08000923 	.word	0x08000923
 80008a4:	08000923 	.word	0x08000923
 80008a8:	08000923 	.word	0x08000923
 80008ac:	08000923 	.word	0x08000923
 80008b0:	08000923 	.word	0x08000923
 80008b4:	08000923 	.word	0x08000923
 80008b8:	080008d1 	.word	0x080008d1
 80008bc:	080008e5 	.word	0x080008e5
 80008c0:	4a79      	ldr	r2, [pc, #484]	@ (8000aa8 <HAL_GPIO_Init+0x2b4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d013      	beq.n	80008ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008c6:	e02c      	b.n	8000922 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	623b      	str	r3, [r7, #32]
          break;
 80008ce:	e029      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	3304      	adds	r3, #4
 80008d6:	623b      	str	r3, [r7, #32]
          break;
 80008d8:	e024      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	3308      	adds	r3, #8
 80008e0:	623b      	str	r3, [r7, #32]
          break;
 80008e2:	e01f      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	330c      	adds	r3, #12
 80008ea:	623b      	str	r3, [r7, #32]
          break;
 80008ec:	e01a      	b.n	8000924 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008f6:	2304      	movs	r3, #4
 80008f8:	623b      	str	r3, [r7, #32]
          break;
 80008fa:	e013      	b.n	8000924 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d105      	bne.n	8000910 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000904:	2308      	movs	r3, #8
 8000906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	611a      	str	r2, [r3, #16]
          break;
 800090e:	e009      	b.n	8000924 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000910:	2308      	movs	r3, #8
 8000912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	615a      	str	r2, [r3, #20]
          break;
 800091a:	e003      	b.n	8000924 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
          break;
 8000920:	e000      	b.n	8000924 <HAL_GPIO_Init+0x130>
          break;
 8000922:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	2bff      	cmp	r3, #255	@ 0xff
 8000928:	d801      	bhi.n	800092e <HAL_GPIO_Init+0x13a>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	e001      	b.n	8000932 <HAL_GPIO_Init+0x13e>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3304      	adds	r3, #4
 8000932:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d802      	bhi.n	8000940 <HAL_GPIO_Init+0x14c>
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	e002      	b.n	8000946 <HAL_GPIO_Init+0x152>
 8000940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000942:	3b08      	subs	r3, #8
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	210f      	movs	r1, #15
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	6a39      	ldr	r1, [r7, #32]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	431a      	orrs	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 80b1 	beq.w	8000ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000974:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <HAL_GPIO_Init+0x2b8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a4c      	ldr	r2, [pc, #304]	@ (8000aac <HAL_GPIO_Init+0x2b8>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b4a      	ldr	r3, [pc, #296]	@ (8000aac <HAL_GPIO_Init+0x2b8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800098c:	4a48      	ldr	r2, [pc, #288]	@ (8000ab0 <HAL_GPIO_Init+0x2bc>)
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	3302      	adds	r3, #2
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a40      	ldr	r2, [pc, #256]	@ (8000ab4 <HAL_GPIO_Init+0x2c0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d013      	beq.n	80009e0 <HAL_GPIO_Init+0x1ec>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3f      	ldr	r2, [pc, #252]	@ (8000ab8 <HAL_GPIO_Init+0x2c4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d00d      	beq.n	80009dc <HAL_GPIO_Init+0x1e8>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3e      	ldr	r2, [pc, #248]	@ (8000abc <HAL_GPIO_Init+0x2c8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3d      	ldr	r2, [pc, #244]	@ (8000ac0 <HAL_GPIO_Init+0x2cc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <HAL_GPIO_Init+0x1e0>
 80009d0:	2303      	movs	r3, #3
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009d4:	2304      	movs	r3, #4
 80009d6:	e004      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009d8:	2302      	movs	r3, #2
 80009da:	e002      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <HAL_GPIO_Init+0x1ee>
 80009e0:	2300      	movs	r3, #0
 80009e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009e4:	f002 0203 	and.w	r2, r2, #3
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009f2:	492f      	ldr	r1, [pc, #188]	@ (8000ab0 <HAL_GPIO_Init+0x2bc>)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	492c      	ldr	r1, [pc, #176]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	608b      	str	r3, [r1, #8]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4928      	ldr	r1, [pc, #160]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	4922      	ldr	r1, [pc, #136]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60cb      	str	r3, [r1, #12]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	491e      	ldr	r1, [pc, #120]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	4918      	ldr	r1, [pc, #96]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	4914      	ldr	r1, [pc, #80]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	490e      	ldr	r1, [pc, #56]	@ (8000ac4 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	600b      	str	r3, [r1, #0]
 8000a90:	e021      	b.n	8000ad6 <HAL_GPIO_Init+0x2e2>
 8000a92:	bf00      	nop
 8000a94:	10320000 	.word	0x10320000
 8000a98:	10310000 	.word	0x10310000
 8000a9c:	10220000 	.word	0x10220000
 8000aa0:	10210000 	.word	0x10210000
 8000aa4:	10120000 	.word	0x10120000
 8000aa8:	10110000 	.word	0x10110000
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	40011000 	.word	0x40011000
 8000ac0:	40011400 	.word	0x40011400
 8000ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_GPIO_Init+0x304>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4909      	ldr	r1, [pc, #36]	@ (8000af8 <HAL_GPIO_Init+0x304>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad8:	3301      	adds	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f47f ae8e 	bne.w	8000808 <HAL_GPIO_Init+0x14>
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	372c      	adds	r7, #44	@ 0x2c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40010400 	.word	0x40010400

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e12b      	b.n	8000d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d106      	bne.n	8000b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fc4e 	bl	80003f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2224      	movs	r2, #36	@ 0x24
 8000b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b90:	f001 fbca 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8000b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4a81      	ldr	r2, [pc, #516]	@ (8000da0 <HAL_I2C_Init+0x274>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d807      	bhi.n	8000bb0 <HAL_I2C_Init+0x84>
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4a80      	ldr	r2, [pc, #512]	@ (8000da4 <HAL_I2C_Init+0x278>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	bf94      	ite	ls
 8000ba8:	2301      	movls	r3, #1
 8000baa:	2300      	movhi	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	e006      	b.n	8000bbe <HAL_I2C_Init+0x92>
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4a7d      	ldr	r2, [pc, #500]	@ (8000da8 <HAL_I2C_Init+0x27c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	bf94      	ite	ls
 8000bb8:	2301      	movls	r3, #1
 8000bba:	2300      	movhi	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e0e7      	b.n	8000d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4a78      	ldr	r2, [pc, #480]	@ (8000dac <HAL_I2C_Init+0x280>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4a6a      	ldr	r2, [pc, #424]	@ (8000da0 <HAL_I2C_Init+0x274>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d802      	bhi.n	8000c00 <HAL_I2C_Init+0xd4>
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	e009      	b.n	8000c14 <HAL_I2C_Init+0xe8>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	4a69      	ldr	r2, [pc, #420]	@ (8000db0 <HAL_I2C_Init+0x284>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	099b      	lsrs	r3, r3, #6
 8000c12:	3301      	adds	r3, #1
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000c26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	495c      	ldr	r1, [pc, #368]	@ (8000da0 <HAL_I2C_Init+0x274>)
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d819      	bhi.n	8000c68 <HAL_I2C_Init+0x13c>
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	1e59      	subs	r1, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c42:	1c59      	adds	r1, r3, #1
 8000c44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000c48:	400b      	ands	r3, r1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00a      	beq.n	8000c64 <HAL_I2C_Init+0x138>
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1e59      	subs	r1, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c62:	e051      	b.n	8000d08 <HAL_I2C_Init+0x1dc>
 8000c64:	2304      	movs	r3, #4
 8000c66:	e04f      	b.n	8000d08 <HAL_I2C_Init+0x1dc>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_I2C_Init+0x168>
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	1e58      	subs	r0, r3, #1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6859      	ldr	r1, [r3, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	440b      	add	r3, r1
 8000c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf0c      	ite	eq
 8000c8c:	2301      	moveq	r3, #1
 8000c8e:	2300      	movne	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	e012      	b.n	8000cba <HAL_I2C_Init+0x18e>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1e58      	subs	r0, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6859      	ldr	r1, [r3, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	0099      	lsls	r1, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_I2C_Init+0x196>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e022      	b.n	8000d08 <HAL_I2C_Init+0x1dc>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_I2C_Init+0x1bc>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1e58      	subs	r0, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6859      	ldr	r1, [r3, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	440b      	add	r3, r1
 8000cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ce6:	e00f      	b.n	8000d08 <HAL_I2C_Init+0x1dc>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	1e58      	subs	r0, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6859      	ldr	r1, [r3, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	0099      	lsls	r1, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	6809      	ldr	r1, [r1, #0]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69da      	ldr	r2, [r3, #28]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6911      	ldr	r1, [r2, #16]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68d2      	ldr	r2, [r2, #12]
 8000d42:	4311      	orrs	r1, r2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2220      	movs	r2, #32
 8000d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	000186a0 	.word	0x000186a0
 8000da4:	001e847f 	.word	0x001e847f
 8000da8:	003d08ff 	.word	0x003d08ff
 8000dac:	431bde83 	.word	0x431bde83
 8000db0:	10624dd3 	.word	0x10624dd3

08000db4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	817b      	strh	r3, [r7, #10]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff fc02 	bl	80005d0 <HAL_GetTick>
 8000dcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b20      	cmp	r3, #32
 8000dd8:	f040 80e0 	bne.w	8000f9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2319      	movs	r3, #25
 8000de2:	2201      	movs	r2, #1
 8000de4:	4970      	ldr	r1, [pc, #448]	@ (8000fa8 <HAL_I2C_Master_Transmit+0x1f4>)
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 fc9e 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000df2:	2302      	movs	r3, #2
 8000df4:	e0d3      	b.n	8000f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <HAL_I2C_Master_Transmit+0x50>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e0cc      	b.n	8000f9e <HAL_I2C_Master_Transmit+0x1ea>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d007      	beq.n	8000e2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2221      	movs	r2, #33	@ 0x21
 8000e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2210      	movs	r2, #16
 8000e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	893a      	ldrh	r2, [r7, #8]
 8000e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4a50      	ldr	r2, [pc, #320]	@ (8000fac <HAL_I2C_Master_Transmit+0x1f8>)
 8000e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e6c:	8979      	ldrh	r1, [r7, #10]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	6a3a      	ldr	r2, [r7, #32]
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f000 fb08 	bl	8001488 <I2C_MasterRequestWrite>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e08d      	b.n	8000f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e98:	e066      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 fd5c 	bl	800195c <I2C_WaitOnTXEFlagUntilTimeout>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d107      	bne.n	8000ec2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e06b      	b.n	8000f9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d11b      	bne.n	8000f3c <HAL_I2C_Master_Transmit+0x188>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d017      	beq.n	8000f3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	6a39      	ldr	r1, [r7, #32]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 fd53 	bl	80019ec <I2C_WaitOnBTFFlagUntilTimeout>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00d      	beq.n	8000f68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d107      	bne.n	8000f64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e01a      	b.n	8000f9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d194      	bne.n	8000e9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2220      	movs	r2, #32
 8000f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e000      	b.n	8000f9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f9c:	2302      	movs	r3, #2
  }
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	00100002 	.word	0x00100002
 8000fac:	ffff0000 	.word	0xffff0000

08000fb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	@ 0x30
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	817b      	strh	r3, [r7, #10]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff fb02 	bl	80005d0 <HAL_GetTick>
 8000fcc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b20      	cmp	r3, #32
 8000fd8:	f040 824b 	bne.w	8001472 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2319      	movs	r3, #25
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	497f      	ldr	r1, [pc, #508]	@ (80011e4 <HAL_I2C_Master_Receive+0x234>)
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 fb9e 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e23e      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_I2C_Master_Receive+0x54>
 8001000:	2302      	movs	r3, #2
 8001002:	e237      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d007      	beq.n	800102a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2222      	movs	r2, #34	@ 0x22
 800103e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2210      	movs	r2, #16
 8001046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	893a      	ldrh	r2, [r7, #8]
 800105a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001060:	b29a      	uxth	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4a5f      	ldr	r2, [pc, #380]	@ (80011e8 <HAL_I2C_Master_Receive+0x238>)
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800106c:	8979      	ldrh	r1, [r7, #10]
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 fa8a 	bl	800158c <I2C_MasterRequestRead>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e1f8      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001086:	2b00      	cmp	r3, #0
 8001088:	d113      	bne.n	80010b2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e1cc      	b.n	800144c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d11e      	bne.n	80010f8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010c8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ca:	b672      	cpsid	i
}
 80010cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010f4:	b662      	cpsie	i
}
 80010f6:	e035      	b.n	8001164 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d11e      	bne.n	800113e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800110e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001138:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800113a:	b662      	cpsie	i
}
 800113c:	e012      	b.n	8001164 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800114c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001164:	e172      	b.n	800144c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800116a:	2b03      	cmp	r3, #3
 800116c:	f200 811f 	bhi.w	80013ae <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001174:	2b01      	cmp	r3, #1
 8001176:	d123      	bne.n	80011c0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 fc7d 	bl	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e173      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80011be:	e145      	b.n	800144c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d152      	bne.n	800126e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ce:	2200      	movs	r2, #0
 80011d0:	4906      	ldr	r1, [pc, #24]	@ (80011ec <HAL_I2C_Master_Receive+0x23c>)
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 faa8 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d008      	beq.n	80011f0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e148      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
 80011e2:	bf00      	nop
 80011e4:	00100002 	.word	0x00100002
 80011e8:	ffff0000 	.word	0xffff0000
 80011ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001220:	3b01      	subs	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001236:	b662      	cpsie	i
}
 8001238:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001256:	3b01      	subs	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001262:	b29b      	uxth	r3, r3
 8001264:	3b01      	subs	r3, #1
 8001266:	b29a      	uxth	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800126c:	e0ee      	b.n	800144c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001274:	2200      	movs	r2, #0
 8001276:	4981      	ldr	r1, [pc, #516]	@ (800147c <HAL_I2C_Master_Receive+0x4cc>)
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 fa55 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0f5      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001296:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80012ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001480 <HAL_I2C_Master_Receive+0x4d0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	08db      	lsrs	r3, r3, #3
 80012d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001484 <HAL_I2C_Master_Receive+0x4d4>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0a1a      	lsrs	r2, r3, #8
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00da      	lsls	r2, r3, #3
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d118      	bne.n	8001326 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f043 0220 	orr.w	r2, r3, #32
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001316:	b662      	cpsie	i
}
 8001318:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0a6      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b04      	cmp	r3, #4
 8001332:	d1d9      	bne.n	80012e8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001376:	b662      	cpsie	i
}
 8001378:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80013ac:	e04e      	b.n	800144c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 fb62 	bl	8001a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e058      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d124      	bne.n	800144c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001406:	2b03      	cmp	r3, #3
 8001408:	d107      	bne.n	800141a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001418:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001436:	3b01      	subs	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f ae88 	bne.w	8001166 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2220      	movs	r2, #32
 800145a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001472:	2302      	movs	r3, #2
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	3728      	adds	r7, #40	@ 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	00010004 	.word	0x00010004
 8001480:	20000000 	.word	0x20000000
 8001484:	14f8b589 	.word	0x14f8b589

08001488 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af02      	add	r7, sp, #8
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d006      	beq.n	80014b2 <I2C_MasterRequestWrite+0x2a>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d003      	beq.n	80014b2 <I2C_MasterRequestWrite+0x2a>
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80014b0:	d108      	bne.n	80014c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e00b      	b.n	80014dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	2b12      	cmp	r3, #18
 80014ca:	d107      	bne.n	80014dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f91d 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00d      	beq.n	8001510 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001502:	d103      	bne.n	800150c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e035      	b.n	800157c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001518:	d108      	bne.n	800152c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	e01b      	b.n	8001564 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	11db      	asrs	r3, r3, #7
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0306 	and.w	r3, r3, #6
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f063 030f 	orn	r3, r3, #15
 800153c:	b2da      	uxtb	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	490e      	ldr	r1, [pc, #56]	@ (8001584 <I2C_MasterRequestWrite+0xfc>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f966 	bl	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e010      	b.n	800157c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <I2C_MasterRequestWrite+0x100>)
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f956 	bl	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	00010008 	.word	0x00010008
 8001588:	00010002 	.word	0x00010002

0800158c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	460b      	mov	r3, r1
 800159a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d006      	beq.n	80015c6 <I2C_MasterRequestRead+0x3a>
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d003      	beq.n	80015c6 <I2C_MasterRequestRead+0x3a>
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80015c4:	d108      	bne.n	80015d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e00b      	b.n	80015f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	2b11      	cmp	r3, #17
 80015de:	d107      	bne.n	80015f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f893 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00d      	beq.n	8001624 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001616:	d103      	bne.n	8001620 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e079      	b.n	8001718 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800162c:	d108      	bne.n	8001640 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	e05f      	b.n	8001700 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	11db      	asrs	r3, r3, #7
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 0306 	and.w	r3, r3, #6
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f063 030f 	orn	r3, r3, #15
 8001650:	b2da      	uxtb	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4930      	ldr	r1, [pc, #192]	@ (8001720 <I2C_MasterRequestRead+0x194>)
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f8dc 	bl	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e054      	b.n	8001718 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4929      	ldr	r1, [pc, #164]	@ (8001724 <I2C_MasterRequestRead+0x198>)
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f8cc 	bl	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e044      	b.n	8001718 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f831 	bl	8001728 <I2C_WaitOnFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00d      	beq.n	80016e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016da:	d103      	bne.n	80016e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e017      	b.n	8001718 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80016e8:	897b      	ldrh	r3, [r7, #10]
 80016ea:	11db      	asrs	r3, r3, #7
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0306 	and.w	r3, r3, #6
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f063 030e 	orn	r3, r3, #14
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4907      	ldr	r1, [pc, #28]	@ (8001724 <I2C_MasterRequestRead+0x198>)
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f888 	bl	800181c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00010008 	.word	0x00010008
 8001724:	00010002 	.word	0x00010002

08001728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	4613      	mov	r3, r2
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001738:	e048      	b.n	80017cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d044      	beq.n	80017cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001742:	f7fe ff45 	bl	80005d0 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d302      	bcc.n	8001758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d139      	bne.n	80017cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d10d      	bne.n	800177e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	43da      	mvns	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4013      	ands	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	e00c      	b.n	8001798 <I2C_WaitOnFlagUntilTimeout+0x70>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	43da      	mvns	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4013      	ands	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	429a      	cmp	r2, r3
 800179c:	d116      	bne.n	80017cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e023      	b.n	8001814 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10d      	bne.n	80017f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	43da      	mvns	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	4013      	ands	r3, r2
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	e00c      	b.n	800180c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	43da      	mvns	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	4013      	ands	r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	429a      	cmp	r2, r3
 8001810:	d093      	beq.n	800173a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800182a:	e071      	b.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800183a:	d123      	bne.n	8001884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f043 0204 	orr.w	r2, r3, #4
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e067      	b.n	8001954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188a:	d041      	beq.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188c:	f7fe fea0 	bl	80005d0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d302      	bcc.n	80018a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d136      	bne.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10c      	bne.n	80018c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4013      	ands	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf14      	ite	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	2300      	moveq	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	e00b      	b.n	80018de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	4013      	ands	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d016      	beq.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f043 0220 	orr.w	r2, r3, #32
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e021      	b.n	8001954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10c      	bne.n	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	43da      	mvns	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	4013      	ands	r3, r2
 8001926:	b29b      	uxth	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf14      	ite	ne
 800192c:	2301      	movne	r3, #1
 800192e:	2300      	moveq	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e00b      	b.n	800194c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4013      	ands	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	f47f af6d 	bne.w	800182c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001968:	e034      	b.n	80019d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f8e3 	bl	8001b36 <I2C_IsAcknowledgeFailed>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e034      	b.n	80019e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d028      	beq.n	80019d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001982:	f7fe fe25 	bl	80005d0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	429a      	cmp	r2, r3
 8001990:	d302      	bcc.n	8001998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d11d      	bne.n	80019d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a2:	2b80      	cmp	r3, #128	@ 0x80
 80019a4:	d016      	beq.n	80019d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e007      	b.n	80019e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019de:	2b80      	cmp	r3, #128	@ 0x80
 80019e0:	d1c3      	bne.n	800196a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019f8:	e034      	b.n	8001a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f89b 	bl	8001b36 <I2C_IsAcknowledgeFailed>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e034      	b.n	8001a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d028      	beq.n	8001a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7fe fddd 	bl	80005d0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11d      	bne.n	8001a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d016      	beq.n	8001a64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e007      	b.n	8001a74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d1c3      	bne.n	80019fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a88:	e049      	b.n	8001b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d119      	bne.n	8001acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f06f 0210 	mvn.w	r2, #16
 8001aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e030      	b.n	8001b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001acc:	f7fe fd80 	bl	80005d0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d302      	bcc.n	8001ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d11d      	bne.n	8001b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aec:	2b40      	cmp	r3, #64	@ 0x40
 8001aee:	d016      	beq.n	8001b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f043 0220 	orr.w	r2, r3, #32
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e007      	b.n	8001b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b28:	2b40      	cmp	r3, #64	@ 0x40
 8001b2a:	d1ae      	bne.n	8001a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4c:	d11b      	bne.n	8001b86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2220      	movs	r2, #32
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f043 0204 	orr.w	r2, r3, #4
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e272      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8087 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb4:	4b92      	ldr	r3, [pc, #584]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d00c      	beq.n	8001bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d112      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5e>
 8001bcc:	4b8c      	ldr	r3, [pc, #560]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bda:	4b89      	ldr	r3, [pc, #548]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d06c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x12c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d168      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e24c      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x76>
 8001bfc:	4b80      	ldr	r3, [pc, #512]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a7f      	ldr	r2, [pc, #508]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e02e      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x98>
 8001c12:	4b7b      	ldr	r3, [pc, #492]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7a      	ldr	r2, [pc, #488]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b78      	ldr	r3, [pc, #480]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0xbc>
 8001c36:	4b72      	ldr	r3, [pc, #456]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a71      	ldr	r2, [pc, #452]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6f      	ldr	r3, [pc, #444]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6e      	ldr	r2, [pc, #440]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c50:	4b6b      	ldr	r3, [pc, #428]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6a      	ldr	r2, [pc, #424]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a67      	ldr	r2, [pc, #412]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fcae 	bl	80005d0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe fcaa 	bl	80005d0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e200      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe4>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe fc9a 	bl	80005d0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7fe fc96 	bl	80005d0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1ec      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x10c>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cda:	4b49      	ldr	r3, [pc, #292]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x18c>
 8001ce6:	4b46      	ldr	r3, [pc, #280]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x176>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1c0      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4939      	ldr	r1, [pc, #228]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e03a      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe fc4f 	bl	80005d0 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7fe fc4b 	bl	80005d0 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1a1      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4927      	ldr	r1, [pc, #156]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b26      	ldr	r3, [pc, #152]	@ (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fc2e 	bl	80005d0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7fe fc2a 	bl	80005d0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e180      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03a      	beq.n	8001e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d019      	beq.n	8001dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7fe fc0e 	bl	80005d0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7fe fc0a 	bl	80005d0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e160      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f000 faba 	bl	8002350 <RCC_Delay>
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7fe fbf4 	bl	80005d0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dea:	e00f      	b.n	8001e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7fe fbf0 	bl	80005d0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d908      	bls.n	8001e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e146      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	42420000 	.word	0x42420000
 8001e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	4b92      	ldr	r3, [pc, #584]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e9      	bne.n	8001dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a6 	beq.w	8001f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b88      	ldr	r3, [pc, #544]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a87      	ldr	r2, [pc, #540]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b85      	ldr	r3, [pc, #532]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b82      	ldr	r3, [pc, #520]	@ (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7e      	ldr	r2, [pc, #504]	@ (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fbb1 	bl	80005d0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7fe fbad 	bl	80005d0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	@ 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e103      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b75      	ldr	r3, [pc, #468]	@ (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x312>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	e02d      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x334>
 8001eae:	4b6a      	ldr	r3, [pc, #424]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a69      	ldr	r2, [pc, #420]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b67      	ldr	r3, [pc, #412]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a66      	ldr	r2, [pc, #408]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	e01c      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x356>
 8001ed0:	4b61      	ldr	r3, [pc, #388]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a60      	ldr	r2, [pc, #384]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	4b5e      	ldr	r3, [pc, #376]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001eea:	4b5b      	ldr	r3, [pc, #364]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a5a      	ldr	r2, [pc, #360]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a57      	ldr	r2, [pc, #348]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fb61 	bl	80005d0 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe fb5d 	bl	80005d0 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0b1      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	4b4b      	ldr	r3, [pc, #300]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ee      	beq.n	8001f12 <HAL_RCC_OscConfig+0x37e>
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7fe fb4b 	bl	80005d0 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe fb47 	bl	80005d0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e09b      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	4b40      	ldr	r3, [pc, #256]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b3c      	ldr	r3, [pc, #240]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7c:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d061      	beq.n	800204c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d146      	bne.n	800201e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fb1b 	bl	80005d0 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fb17 	bl	80005d0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e06d      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc4:	d108      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc6:	4b24      	ldr	r3, [pc, #144]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4921      	ldr	r1, [pc, #132]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a19      	ldr	r1, [r3, #32]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	491b      	ldr	r1, [pc, #108]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe faeb 	bl	80005d0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fae7 	bl	80005d0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e03d      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x46a>
 800201c:	e035      	b.n	800208a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fad4 	bl	80005d0 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe fad0 	bl	80005d0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e026      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x498>
 800204a:	e01e      	b.n	800208a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e019      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000
 8002060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_OscConfig+0x500>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d0      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b67      	ldr	r3, [pc, #412]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4965      	ldr	r1, [pc, #404]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e073      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b3d      	ldr	r3, [pc, #244]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b39      	ldr	r3, [pc, #228]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4936      	ldr	r1, [pc, #216]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7fe fa22 	bl	80005d0 <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7fe fa1e 	bl	80005d0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e053      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d210      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4922      	ldr	r1, [pc, #136]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002212:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	@ (8002260 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <HAL_RCC_ClockConfig+0x1cc>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x1d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f980 	bl	800054c <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	080023fc 	.word	0x080023fc
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x94>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
 8002296:	2b08      	cmp	r3, #8
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x36>
 800229a:	e027      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	613b      	str	r3, [r7, #16]
      break;
 80022a0:	e027      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x94>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0c5b      	lsrs	r3, r3, #17
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	4a11      	ldr	r2, [pc, #68]	@ (800230c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e004      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	693b      	ldr	r3, [r7, #16]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	08002414 	.word	0x08002414
 800230c:	08002424 	.word	0x08002424
 8002310:	003d0900 	.word	0x003d0900

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b02      	ldr	r3, [pc, #8]	@ (8002324 <HAL_RCC_GetHCLKFreq+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000000 	.word	0x20000000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff2 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	0800240c 	.word	0x0800240c

08002350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <RCC_Delay+0x34>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <RCC_Delay+0x38>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a5b      	lsrs	r3, r3, #9
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800236c:	bf00      	nop
  }
  while (Delay --);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	60fa      	str	r2, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <RCC_Delay+0x1c>
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000000 	.word	0x20000000
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <memset>:
 800238c:	4603      	mov	r3, r0
 800238e:	4402      	add	r2, r0
 8002390:	4293      	cmp	r3, r2
 8002392:	d100      	bne.n	8002396 <memset+0xa>
 8002394:	4770      	bx	lr
 8002396:	f803 1b01 	strb.w	r1, [r3], #1
 800239a:	e7f9      	b.n	8002390 <memset+0x4>

0800239c <__libc_init_array>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2600      	movs	r6, #0
 80023a0:	4d0c      	ldr	r5, [pc, #48]	@ (80023d4 <__libc_init_array+0x38>)
 80023a2:	4c0d      	ldr	r4, [pc, #52]	@ (80023d8 <__libc_init_array+0x3c>)
 80023a4:	1b64      	subs	r4, r4, r5
 80023a6:	10a4      	asrs	r4, r4, #2
 80023a8:	42a6      	cmp	r6, r4
 80023aa:	d109      	bne.n	80023c0 <__libc_init_array+0x24>
 80023ac:	f000 f81a 	bl	80023e4 <_init>
 80023b0:	2600      	movs	r6, #0
 80023b2:	4d0a      	ldr	r5, [pc, #40]	@ (80023dc <__libc_init_array+0x40>)
 80023b4:	4c0a      	ldr	r4, [pc, #40]	@ (80023e0 <__libc_init_array+0x44>)
 80023b6:	1b64      	subs	r4, r4, r5
 80023b8:	10a4      	asrs	r4, r4, #2
 80023ba:	42a6      	cmp	r6, r4
 80023bc:	d105      	bne.n	80023ca <__libc_init_array+0x2e>
 80023be:	bd70      	pop	{r4, r5, r6, pc}
 80023c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c4:	4798      	blx	r3
 80023c6:	3601      	adds	r6, #1
 80023c8:	e7ee      	b.n	80023a8 <__libc_init_array+0xc>
 80023ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ce:	4798      	blx	r3
 80023d0:	3601      	adds	r6, #1
 80023d2:	e7f2      	b.n	80023ba <__libc_init_array+0x1e>
 80023d4:	08002428 	.word	0x08002428
 80023d8:	08002428 	.word	0x08002428
 80023dc:	08002428 	.word	0x08002428
 80023e0:	0800242c 	.word	0x0800242c

080023e4 <_init>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr

080023f0 <_fini>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	bf00      	nop
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr
