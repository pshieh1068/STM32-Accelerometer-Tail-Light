
TEST BLINKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000340  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000340  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000344  08000344  00001344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000348  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800034c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800034c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001667  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f5  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00003d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016b  00000000  00000000  00003f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015746  00000000  00000000  00004103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029b0  00000000  00000000  00019849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d2d2  00000000  00000000  0001c1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000994cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000634  00000000  00000000  00099510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00099b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000328 	.word	0x08000328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000328 	.word	0x08000328

0800014c <main>:
#define LED_GPIO_PORT GPIOC

void SystemClock_Config(void);
void MX_GPIO_Init();

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, 0);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000156:	4809      	ldr	r0, [pc, #36]	@ (800017c <main+0x30>)
 8000158:	f000 f8aa 	bl	80002b0 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800015c:	20c8      	movs	r0, #200	@ 0xc8
 800015e:	f000 f883 	bl	8000268 <HAL_Delay>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, 1);
 8000162:	2201      	movs	r2, #1
 8000164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <main+0x30>)
 800016a:	f000 f8a1 	bl	80002b0 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800016e:	20c8      	movs	r0, #200	@ 0xc8
 8000170:	f000 f87a 	bl	8000268 <HAL_Delay>
 8000174:	2300      	movs	r3, #0

}
 8000176:	4618      	mov	r0, r3
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000184:	bf00      	nop
 8000186:	e7fd      	b.n	8000184 <NMI_Handler+0x4>

08000188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800018c:	bf00      	nop
 800018e:	e7fd      	b.n	800018c <HardFault_Handler+0x4>

08000190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000194:	bf00      	nop
 8000196:	e7fd      	b.n	8000194 <MemManage_Handler+0x4>

08000198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800019c:	bf00      	nop
 800019e:	e7fd      	b.n	800019c <BusFault_Handler+0x4>

080001a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001a4:	bf00      	nop
 80001a6:	e7fd      	b.n	80001a4 <UsageFault_Handler+0x4>

080001a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001d0:	f000 f82e 	bl	8000230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001e4:	f7ff fff8 	bl	80001d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e8:	480b      	ldr	r0, [pc, #44]	@ (8000218 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001ea:	490c      	ldr	r1, [pc, #48]	@ (800021c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000220 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f0:	e002      	b.n	80001f8 <LoopCopyDataInit>

080001f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f6:	3304      	adds	r3, #4

080001f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001fc:	d3f9      	bcc.n	80001f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fe:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000200:	4c09      	ldr	r4, [pc, #36]	@ (8000228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000204:	e001      	b.n	800020a <LoopFillZerobss>

08000206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000208:	3204      	adds	r2, #4

0800020a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800020a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800020c:	d3fb      	bcc.n	8000206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800020e:	f000 f867 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000212:	f7ff ff9b 	bl	800014c <main>
  bx lr
 8000216:	4770      	bx	lr
  ldr r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800021c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000220:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 8000224:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000228:	20000024 	.word	0x20000024

0800022c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC1_2_IRQHandler>
	...

08000230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <HAL_IncTick+0x1c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <HAL_IncTick+0x20>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4413      	add	r3, r2
 8000240:	4a03      	ldr	r2, [pc, #12]	@ (8000250 <HAL_IncTick+0x20>)
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	20000000 	.word	0x20000000
 8000250:	20000020 	.word	0x20000020

08000254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return uwTick;
 8000258:	4b02      	ldr	r3, [pc, #8]	@ (8000264 <HAL_GetTick+0x10>)
 800025a:	681b      	ldr	r3, [r3, #0]
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	20000020 	.word	0x20000020

08000268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000270:	f7ff fff0 	bl	8000254 <HAL_GetTick>
 8000274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000280:	d005      	beq.n	800028e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000282:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <HAL_Delay+0x44>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	4413      	add	r3, r2
 800028c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800028e:	bf00      	nop
 8000290:	f7ff ffe0 	bl	8000254 <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	68fa      	ldr	r2, [r7, #12]
 800029c:	429a      	cmp	r2, r3
 800029e:	d8f7      	bhi.n	8000290 <HAL_Delay+0x28>
  {
  }
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	807b      	strh	r3, [r7, #2]
 80002bc:	4613      	mov	r3, r2
 80002be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80002c0:	787b      	ldrb	r3, [r7, #1]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d003      	beq.n	80002ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80002c6:	887a      	ldrh	r2, [r7, #2]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80002cc:	e003      	b.n	80002d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80002ce:	887b      	ldrh	r3, [r7, #2]
 80002d0:	041a      	lsls	r2, r3, #16
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	2600      	movs	r6, #0
 80002e4:	4d0c      	ldr	r5, [pc, #48]	@ (8000318 <__libc_init_array+0x38>)
 80002e6:	4c0d      	ldr	r4, [pc, #52]	@ (800031c <__libc_init_array+0x3c>)
 80002e8:	1b64      	subs	r4, r4, r5
 80002ea:	10a4      	asrs	r4, r4, #2
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	f000 f81a 	bl	8000328 <_init>
 80002f4:	2600      	movs	r6, #0
 80002f6:	4d0a      	ldr	r5, [pc, #40]	@ (8000320 <__libc_init_array+0x40>)
 80002f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000324 <__libc_init_array+0x44>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
