
TEST BLINKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000614  08000614  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000614  08000614  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000614  08000614  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000614  08000614  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000614  08000614  00001614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000618  08000618  00001618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800061c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000628  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000628  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002988  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bbf  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00005580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000245  00000000  00000000  000058b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a90  00000000  00000000  00005afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c64  00000000  00000000  0001b58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d68f  00000000  00000000  0001f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae4  00000000  00000000  0009c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0009d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080005fc 	.word	0x080005fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080005fc 	.word	0x080005fc

0800014c <main>:
void ADXL343_Init(void);
uint8_t ADXL343_ReadRegister(uint8_t reg);
void ADXL343_WriteRegister(uint8_t reg, uint8_t value);
void Error_Handler(void);

int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    // Initialize HAL library
    HAL_Init();
 8000152:	f000 f8ad 	bl	80002b0 <HAL_Init>
    //MX_I2C1_Init();
    // Initialize ADXL343 accelerometer
    //ADXL343_Init();

    // Flash the LED 3 times at startup
    for (int i = 0; i < 3; i++) {
 8000156:	2300      	movs	r3, #0
 8000158:	607b      	str	r3, [r7, #4]
 800015a:	e014      	b.n	8000186 <main+0x3a>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000162:	480d      	ldr	r0, [pc, #52]	@ (8000198 <main+0x4c>)
 8000164:	f000 fa0d 	bl	8000582 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000168:	20c8      	movs	r0, #200	@ 0xc8
 800016a:	f000 f903 	bl	8000374 <HAL_Delay>
        HAL_GPIO_WritePin(LED_GPIO_PORT, LED_PIN, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000174:	4808      	ldr	r0, [pc, #32]	@ (8000198 <main+0x4c>)
 8000176:	f000 fa04 	bl	8000582 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800017a:	20c8      	movs	r0, #200	@ 0xc8
 800017c:	f000 f8fa 	bl	8000374 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	3301      	adds	r3, #1
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2b02      	cmp	r3, #2
 800018a:	dde7      	ble.n	800015c <main+0x10>
 800018c:	2300      	movs	r3, #0

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
        Error_Handler();
    }
    */
}
 800018e:	4618      	mov	r0, r3
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800

0800019c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80001a2:	4b15      	ldr	r3, [pc, #84]	@ (80001f8 <HAL_MspInit+0x5c>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a14      	ldr	r2, [pc, #80]	@ (80001f8 <HAL_MspInit+0x5c>)
 80001a8:	f043 0301 	orr.w	r3, r3, #1
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <HAL_MspInit+0x5c>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	60bb      	str	r3, [r7, #8]
 80001b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80001ba:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <HAL_MspInit+0x5c>)
 80001bc:	69db      	ldr	r3, [r3, #28]
 80001be:	4a0e      	ldr	r2, [pc, #56]	@ (80001f8 <HAL_MspInit+0x5c>)
 80001c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80001c4:	61d3      	str	r3, [r2, #28]
 80001c6:	4b0c      	ldr	r3, [pc, #48]	@ (80001f8 <HAL_MspInit+0x5c>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80001ce:	607b      	str	r3, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80001d2:	4b0a      	ldr	r3, [pc, #40]	@ (80001fc <HAL_MspInit+0x60>)
 80001d4:	685b      	ldr	r3, [r3, #4]
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <HAL_MspInit+0x60>)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40010000 	.word	0x40010000

08000200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <NMI_Handler+0x4>

08000208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800020c:	bf00      	nop
 800020e:	e7fd      	b.n	800020c <HardFault_Handler+0x4>

08000210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000214:	bf00      	nop
 8000216:	e7fd      	b.n	8000214 <MemManage_Handler+0x4>

08000218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800021c:	bf00      	nop
 800021e:	e7fd      	b.n	800021c <BusFault_Handler+0x4>

08000220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000224:	bf00      	nop
 8000226:	e7fd      	b.n	8000224 <UsageFault_Handler+0x4>

08000228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr

08000240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000250:	f000 f874 	bl	800033c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}

08000258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000264:	f7ff fff8 	bl	8000258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480b      	ldr	r0, [pc, #44]	@ (8000298 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800026a:	490c      	ldr	r1, [pc, #48]	@ (800029c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800026c:	4a0c      	ldr	r2, [pc, #48]	@ (80002a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a09      	ldr	r2, [pc, #36]	@ (80002a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000280:	4c09      	ldr	r4, [pc, #36]	@ (80002a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800028e:	f000 f991 	bl	80005b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ff5b 	bl	800014c <main>
  bx lr
 8000296:	4770      	bx	lr
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002a0:	0800061c 	.word	0x0800061c
  ldr r2, =_sbss
 80002a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002a8:	2000002c 	.word	0x2000002c

080002ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC1_2_IRQHandler>
	...

080002b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <HAL_Init+0x28>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <HAL_Init+0x28>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c0:	2003      	movs	r0, #3
 80002c2:	f000 f92b 	bl	800051c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002c6:	200f      	movs	r0, #15
 80002c8:	f000 f808 	bl	80002dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002cc:	f7ff ff66 	bl	800019c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002d0:	2300      	movs	r3, #0
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40022000 	.word	0x40022000

080002dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <HAL_InitTick+0x54>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <HAL_InitTick+0x58>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4619      	mov	r1, r3
 80002ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f935 	bl	800056a <HAL_SYSTICK_Config>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000306:	2301      	movs	r3, #1
 8000308:	e00e      	b.n	8000328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b0f      	cmp	r3, #15
 800030e:	d80a      	bhi.n	8000326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000310:	2200      	movs	r2, #0
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	f04f 30ff 	mov.w	r0, #4294967295
 8000318:	f000 f90b 	bl	8000532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800031c:	4a06      	ldr	r2, [pc, #24]	@ (8000338 <HAL_InitTick+0x5c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000322:	2300      	movs	r3, #0
 8000324:	e000      	b.n	8000328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000326:	2301      	movs	r3, #1
}
 8000328:	4618      	mov	r0, r3
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000000 	.word	0x20000000
 8000334:	20000008 	.word	0x20000008
 8000338:	20000004 	.word	0x20000004

0800033c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <HAL_IncTick+0x1c>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	4b05      	ldr	r3, [pc, #20]	@ (800035c <HAL_IncTick+0x20>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4413      	add	r3, r2
 800034c:	4a03      	ldr	r2, [pc, #12]	@ (800035c <HAL_IncTick+0x20>)
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	20000008 	.word	0x20000008
 800035c:	20000028 	.word	0x20000028

08000360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  return uwTick;
 8000364:	4b02      	ldr	r3, [pc, #8]	@ (8000370 <HAL_GetTick+0x10>)
 8000366:	681b      	ldr	r3, [r3, #0]
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	20000028 	.word	0x20000028

08000374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800037c:	f7ff fff0 	bl	8000360 <HAL_GetTick>
 8000380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800038c:	d005      	beq.n	800039a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <HAL_Delay+0x44>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	461a      	mov	r2, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	4413      	add	r3, r2
 8000398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800039a:	bf00      	nop
 800039c:	f7ff ffe0 	bl	8000360 <HAL_GetTick>
 80003a0:	4602      	mov	r2, r0
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d8f7      	bhi.n	800039c <HAL_Delay+0x28>
  {
  }
}
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000008 	.word	0x20000008

080003bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <__NVIC_SetPriorityGrouping+0x44>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003d2:	68ba      	ldr	r2, [r7, #8]
 80003d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80003d8:	4013      	ands	r3, r2
 80003da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003ee:	4a04      	ldr	r2, [pc, #16]	@ (8000400 <__NVIC_SetPriorityGrouping+0x44>)
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	60d3      	str	r3, [r2, #12]
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <__NVIC_GetPriorityGrouping+0x18>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	0a1b      	lsrs	r3, r3, #8
 800040e:	f003 0307 	and.w	r3, r3, #7
}
 8000412:	4618      	mov	r0, r3
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800042c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000430:	2b00      	cmp	r3, #0
 8000432:	db0a      	blt.n	800044a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	490c      	ldr	r1, [pc, #48]	@ (800046c <__NVIC_SetPriority+0x4c>)
 800043a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043e:	0112      	lsls	r2, r2, #4
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	440b      	add	r3, r1
 8000444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000448:	e00a      	b.n	8000460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4908      	ldr	r1, [pc, #32]	@ (8000470 <__NVIC_SetPriority+0x50>)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	f003 030f 	and.w	r3, r3, #15
 8000456:	3b04      	subs	r3, #4
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	440b      	add	r3, r1
 800045e:	761a      	strb	r2, [r3, #24]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000e100 	.word	0xe000e100
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000474:	b480      	push	{r7}
 8000476:	b089      	sub	sp, #36	@ 0x24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f003 0307 	and.w	r3, r3, #7
 8000486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	f1c3 0307 	rsb	r3, r3, #7
 800048e:	2b04      	cmp	r3, #4
 8000490:	bf28      	it	cs
 8000492:	2304      	movcs	r3, #4
 8000494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	3304      	adds	r3, #4
 800049a:	2b06      	cmp	r3, #6
 800049c:	d902      	bls.n	80004a4 <NVIC_EncodePriority+0x30>
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3b03      	subs	r3, #3
 80004a2:	e000      	b.n	80004a6 <NVIC_EncodePriority+0x32>
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295
 80004ac:	69bb      	ldr	r3, [r7, #24]
 80004ae:	fa02 f303 	lsl.w	r3, r2, r3
 80004b2:	43da      	mvns	r2, r3
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	401a      	ands	r2, r3
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004bc:	f04f 31ff 	mov.w	r1, #4294967295
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	43d9      	mvns	r1, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004cc:	4313      	orrs	r3, r2
         );
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3724      	adds	r7, #36	@ 0x24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80004e8:	d301      	bcc.n	80004ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004ea:	2301      	movs	r3, #1
 80004ec:	e00f      	b.n	800050e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <SysTick_Config+0x40>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004f6:	210f      	movs	r1, #15
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f7ff ff90 	bl	8000420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <SysTick_Config+0x40>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <SysTick_Config+0x40>)
 8000508:	2207      	movs	r2, #7
 800050a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	e000e010 	.word	0xe000e010

0800051c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff49 	bl	80003bc <__NVIC_SetPriorityGrouping>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	4603      	mov	r3, r0
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000544:	f7ff ff5e 	bl	8000404 <__NVIC_GetPriorityGrouping>
 8000548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	68b9      	ldr	r1, [r7, #8]
 800054e:	6978      	ldr	r0, [r7, #20]
 8000550:	f7ff ff90 	bl	8000474 <NVIC_EncodePriority>
 8000554:	4602      	mov	r2, r0
 8000556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff5f 	bl	8000420 <__NVIC_SetPriority>
}
 8000562:	bf00      	nop
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ffb0 	bl	80004d8 <SysTick_Config>
 8000578:	4603      	mov	r3, r0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	807b      	strh	r3, [r7, #2]
 800058e:	4613      	mov	r3, r2
 8000590:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000592:	787b      	ldrb	r3, [r7, #1]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d003      	beq.n	80005a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000598:	887a      	ldrh	r2, [r7, #2]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800059e:	e003      	b.n	80005a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	041a      	lsls	r2, r3, #16
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	611a      	str	r2, [r3, #16]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <__libc_init_array>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	2600      	movs	r6, #0
 80005b8:	4d0c      	ldr	r5, [pc, #48]	@ (80005ec <__libc_init_array+0x38>)
 80005ba:	4c0d      	ldr	r4, [pc, #52]	@ (80005f0 <__libc_init_array+0x3c>)
 80005bc:	1b64      	subs	r4, r4, r5
 80005be:	10a4      	asrs	r4, r4, #2
 80005c0:	42a6      	cmp	r6, r4
 80005c2:	d109      	bne.n	80005d8 <__libc_init_array+0x24>
 80005c4:	f000 f81a 	bl	80005fc <_init>
 80005c8:	2600      	movs	r6, #0
 80005ca:	4d0a      	ldr	r5, [pc, #40]	@ (80005f4 <__libc_init_array+0x40>)
 80005cc:	4c0a      	ldr	r4, [pc, #40]	@ (80005f8 <__libc_init_array+0x44>)
 80005ce:	1b64      	subs	r4, r4, r5
 80005d0:	10a4      	asrs	r4, r4, #2
 80005d2:	42a6      	cmp	r6, r4
 80005d4:	d105      	bne.n	80005e2 <__libc_init_array+0x2e>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005dc:	4798      	blx	r3
 80005de:	3601      	adds	r6, #1
 80005e0:	e7ee      	b.n	80005c0 <__libc_init_array+0xc>
 80005e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e6:	4798      	blx	r3
 80005e8:	3601      	adds	r6, #1
 80005ea:	e7f2      	b.n	80005d2 <__libc_init_array+0x1e>
 80005ec:	08000614 	.word	0x08000614
 80005f0:	08000614 	.word	0x08000614
 80005f4:	08000614 	.word	0x08000614
 80005f8:	08000618 	.word	0x08000618

080005fc <_init>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr

08000608 <_fini>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr
